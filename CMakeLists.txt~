cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
#set(ROS_BUILD_TYPE RelWithDebInfo)

rosbuild_init()

set(${PCL_INCLUDE_DIRS} /opt/ros/groovy/include/pcl-1.6/)
find_package(pcl REQUIRED)
if (PCL_FOUND)
  message(STATUS "PCL FOUND")
  include_directories(${PCL_INCLUDE_DIRS})
  link_directories(${PCL_LIBRARY_DIRS})
  add_definitions(${PCL_DEFINITIONS})
else()
  message(STATUS "ERROR: PCL NOT FOUND")
endif()

find_package(catkin REQUIRED COMPONENTS roslib pcl)

find_package(Boost REQUIRED COMPONENTS system random)
find_package(Eigen REQUIRED)
if (Eigen_FOUND)
  message(STATUS "EIGEN FOUND")
  include_directories(${EIGEN_INCLUDE_DIRS})
  link_directories(${EIGEN_LIBRARY_DIRS})
  add_definitions(${EIGEN_DEFINITIONS})
else()
  message(STATUS "ERROR: EIGEN NOT FOUND")
endif()

find_package(VTK REQUIRED)
if (VTK_FOUND)
  message(STATUS "VTK FOUND")
  include_directories(${VTK_INCLUDE_DIRS})
  link_directories(${VTK_LIBRARY_DIRS})
else()
  message(STATUS "ERROR: VTK NOT FOUND")
endif()

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

#uncomment if you have defined messages
#rosbuild_genmsg()
#uncomment if you have defined services
#rosbuild_gensrv()

include_directories(include ${VTK_INCLUDE_DIRS} ${Boost_INCLUDE_DIRS} ${catkin_INCLUDE_DIRS})

#common commands for building c++ executables and libraries
#rosbuild_add_library(${PROJECT_NAME} src/example.cpp)
#target_link_libraries(${PROJECT_NAME} another_library)
#rosbuild_add_boost_directories()
#rosbuild_link_boost(${PROJECT_NAME} thread)
#rosbuild_add_executable(example examples/example.cpp)
#target_link_libraries(example ${PROJECT_NAME})

rosbuild_add_executable(pr2_tf_listener src/pr2_tf_listener.cpp)
rosbuild_add_executable(pr2_tf_broadcaster src/pr2_tf_broadcaster.cpp)
rosbuild_add_executable(frame_tf_broadcaster src/frame_tf_broadcaster.cpp)


rosbuild_add_executable(simple_point_cloud_analyzer src/simple_point_cloud_analyzer.cpp)
target_link_libraries(simple_point_cloud_analyzer ${PCL_LIBRARIES} ${Boost_LIBRARIES} ${catkin_LIBRARIES})



